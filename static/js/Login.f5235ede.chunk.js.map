{"version":3,"sources":["Components/Login/Login.js"],"names":["Login","dispatch","useDispatch","useState","email","setEmail","password","setPassword","useLoginUserMutation","loginUser","isLoading","handleInputName","e","target","name","value","handleSubmit","a","preventDefault","unwrap","then","payload","toast","success","autoClose","catch","error","result","setCredentials","console","log","Container","className","Form","onSubmit","Group","controlId","Label","Control","type","placeholder","onChange","Button","variant","disabled","color","height","width"],"mappings":"2WAoGeA,EArFD,WACZ,IAAMC,EAAWC,cAEjB,EAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAgCF,mBAAS,IAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KAEA,EAAmCC,cAAnC,mBAAOC,EAAP,KAAoBC,EAApB,KAAoBA,UAEdC,EAAkB,SAAAC,GACtB,MAAwBA,EAAEC,OAAlBC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MAEd,OAAQD,GACN,IAAK,QACHT,EAASU,GACT,MAEF,IAAK,WACHR,EAAYQ,GACZ,MAEF,QACE,SAIAC,EAAY,uCAAG,WAAMJ,GAAN,eAAAK,EAAA,6DACnBL,EAAEM,iBADiB,kBAIIT,EAAU,CAAEL,QAAOE,aACrCa,SACAC,MAAK,SAAAC,GAEJ,OADAC,IAAMC,QAAQ,uBAAwB,CAAEC,UAAW,MAC5CH,KAERI,OAAM,WACLH,IAAMI,MAAM,YAAa,CAAEF,UAAW,SAXzB,QAIXG,EAJW,SAcf1B,EAAS2B,YAAeD,IAdT,gDAiBjBE,QAAQC,IAAR,MAjBiB,yDAAH,sDAqBlB,OACE,eAACC,EAAA,EAAD,WACE,cAAC,IAAD,IACA,oBAAIC,UAAU,cAAd,2BACA,eAACC,EAAA,EAAD,CAAMC,SAAUlB,EAAhB,UACE,eAACiB,EAAA,EAAKE,MAAN,CAAYH,UAAU,OAAOI,UAAU,iBAAvC,UACE,cAACH,EAAA,EAAKI,MAAN,4BACA,cAACJ,EAAA,EAAKK,QAAN,CACEC,KAAK,QACLzB,KAAK,QACLC,MAAOX,EACPoC,YAAY,cACZC,SAAU9B,OAId,eAACsB,EAAA,EAAKE,MAAN,CAAYH,UAAU,OAAOI,UAAU,oBAAvC,UACE,cAACH,EAAA,EAAKI,MAAN,uBACA,cAACJ,EAAA,EAAKK,QAAN,CACEC,KAAK,WACLzB,KAAK,WACLC,MAAOT,EACPkC,YAAY,WACZC,SAAU9B,OAId,cAAC+B,EAAA,EAAD,CAAQC,QAAQ,YAAYJ,KAAK,SAASK,SAAUlC,EAApD,SACGA,EACC,cAAC,IAAD,CAAQ6B,KAAK,UAAUM,MAAM,UAAUC,OAAQ,GAAIC,MAAO,KAE1D","file":"static/js/Login.f5235ede.chunk.js","sourcesContent":["import { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useLoginUserMutation } from '../../Redux/user/userSlice';\r\nimport { setCredentials } from '../../Redux/user/authSlice';\r\n\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nimport Loader from 'react-loader-spinner';\r\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\r\n\r\nimport { Container, Form, Button } from 'react-bootstrap';\r\n\r\nimport './Login.scss';\r\n\r\nconst Login = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n\r\n  const [loginUser, { isLoading }] = useLoginUserMutation();\r\n\r\n  const handleInputName = e => {\r\n    const { name, value } = e.target;\r\n\r\n    switch (name) {\r\n      case 'email':\r\n        setEmail(value);\r\n        break;\r\n\r\n      case 'password':\r\n        setPassword(value);\r\n        break;\r\n\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async e => {\r\n    e.preventDefault();\r\n\r\n    try {\r\n      const result = await loginUser({ email, password })\r\n        .unwrap()\r\n        .then(payload => {\r\n          toast.success('You have registered!', { autoClose: 2000 });\r\n          return payload;\r\n        })\r\n        .catch(() => {\r\n          toast.error('Fuck YOU!', { autoClose: 2000 });\r\n        });\r\n      if (result) {\r\n        dispatch(setCredentials(result));\r\n      }\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <ToastContainer />\r\n      <h2 className=\"login-title\">Log in please</h2>\r\n      <Form onSubmit={handleSubmit}>\r\n        <Form.Group className=\"mb-3\" controlId=\"formGroupEmail\">\r\n          <Form.Label>Email address</Form.Label>\r\n          <Form.Control\r\n            type=\"email\"\r\n            name=\"email\"\r\n            value={email}\r\n            placeholder=\"Enter email\"\r\n            onChange={handleInputName}\r\n          />\r\n        </Form.Group>\r\n\r\n        <Form.Group className=\"mb-3\" controlId=\"formGroupPassword\">\r\n          <Form.Label>Password</Form.Label>\r\n          <Form.Control\r\n            type=\"password\"\r\n            name=\"password\"\r\n            value={password}\r\n            placeholder=\"Password\"\r\n            onChange={handleInputName}\r\n          />\r\n        </Form.Group>\r\n\r\n        <Button variant=\"secondary\" type=\"submit\" disabled={isLoading}>\r\n          {isLoading ? (\r\n            <Loader type=\"Circles\" color=\"#00BFFF\" height={15} width={15} />\r\n          ) : (\r\n            'Submit'\r\n          )}\r\n        </Button>\r\n      </Form>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n"],"sourceRoot":""}